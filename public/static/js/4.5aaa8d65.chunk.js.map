{"version":3,"sources":["shared/util/validators.js","shared/components/FormElements/Input.js","shared/hooks/form.js","shared/components/FormElements/ImageUpload.js","user/pages/Auth.js"],"names":["VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","validator","trim","length","test","inputReducer","state","action","isTouched","Input","props","inputState","dispatch","useReducer","initialValue","initialValid","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","React","createElement","placeholder","onChange","onBlur","rows","className","concat","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","ImageUpload","file","setFile","useState","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","pickedFile","fileIsValid","files","center","src","alt","Button","onClick","pickImageHandler","current","click","Auth","auth","useContext","AuthContext","isSignupMode","setIsNewUser","inputHandler","setFormData","email","password","http","clearErrorHandler","isLoading","error","useHttpClient","Fragment","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","async","e","preventDefault","name","image","signupHandler","fd","FormData","append","process","method","body","loginHandler","headers","JSON","stringify","userid","token","login","console","message","disabled","inverse","toggleSignupLogin","tempFormData","undefined","prev"],"mappings":"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","file":"static/js/4.5aaa8d65.chunk.js","sourcesContent":["const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useReducer, useEffect } from 'react'\n\nimport { validate } from '../../util/validators'\nimport './Input.css'\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      }\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false,\n  })\n\n  const { id, onInput } = props\n  const { value, isValid } = inputState\n\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput])\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators,\n    })\n  }\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH',\n    })\n  }\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    )\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && 'form-control--invalid'\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  )\n}\n\nexport default Input\n","import { useCallback, useReducer } from 'react'\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      }\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      }\n    default:\n      return state\n  }\n}\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  })\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    })\n  }, [])\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity,\n    })\n  }, [])\n\n  return [formState, inputHandler, setFormData]\n}\n","import React, { useRef, useState, useEffect } from 'react'\nimport './ImageUpload.css'\nimport Button from './Button'\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState()\n  const [previewUrl, setPreviewUrl] = useState('')\n  const [isValid, setIsValid] = useState()\n\n  const filePickerRef = useRef()\n\n  useEffect(() => {\n    if (!file) return\n\n    const fileReader = new FileReader()\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result)\n    }\n\n    fileReader.readAsDataURL(file)\n  }, [file])\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click()\n  }\n\n  const pickedHandler = (event) => {\n    let pickedFile\n    let fileIsValid = isValid\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0]\n      setFile(pickedFile)\n      setIsValid(true)\n      fileIsValid = true\n    } else {\n      setIsValid(false)\n      fileIsValid = false\n    }\n\n    props.onInput(props.id, pickedFile, fileIsValid)\n  }\n\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        type=\"file\"\n        style={{ display: 'none' }}\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl ? (\n            <img src={previewUrl} alt=\"Preview\" />\n          ) : (\n            <p>Please pick an image</p>\n          )}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {isValid && <p>{props.errorText}</p>}\n    </div>\n  )\n}\n\nexport default ImageUpload\n","import React, { useState, useContext } from 'react'\nimport { AuthContext } from '../../shared/context/auth-context'\n\nimport {\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_EMAIL,\n  VALIDATOR_REQUIRE,\n} from '../../shared/util/validators'\n\nimport { useForm } from '../../shared/hooks/form'\nimport { useHttpClient } from '../../shared/hooks/http'\n\nimport Card from '../../shared/components/UIElements/Card'\nimport Input from '../../shared/components/FormElements/Input'\nimport Button from '../../shared/components/FormElements/Button'\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal'\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload'\nimport './Auth.css'\n\nexport default function Auth(props) {\n  const auth = useContext(AuthContext)\n  const [isSignupMode, setIsNewUser] = useState(true)\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false,\n      },\n      password: {\n        value: '',\n        isValid: false,\n      },\n    },\n    false\n  )\n\n  const { http, clearErrorHandler, isLoading, error } = useHttpClient()\n\n  const toggleSignupLogin = () => {\n    if (isSignupMode) {\n      const tempFormData = {\n        ...formState.inputs,\n        image: undefined,\n        name: undefined,\n        // image: {\n        //   value: null,\n        //   isValid: false,\n        // },\n        // name: {\n        //   value: '',\n        //   isValid: false,\n        // },\n      }\n      setFormData(\n        tempFormData,\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      )\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false,\n          },\n        },\n        false\n      )\n    }\n\n    setIsNewUser((prev) => !prev)\n  }\n\n  const authSubmitHandler = async (e) => {\n    e.preventDefault()\n    const { email, password, name, image } = formState.inputs\n\n    const signupHandler = async () => {\n      const fd = new FormData()\n      fd.append('name', name.value)\n      fd.append('email', email.value)\n      fd.append('password', password.value)\n      fd.append('image', image.value)\n\n      return await http(process.env.REACT_APP_BACKEND_URL + '/users/signup', {\n        method: 'POST',\n        body: fd,\n      })\n    }\n    const loginHandler = async () => {\n      return await http(process.env.REACT_APP_BACKEND_URL + '/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: email.value,\n          password: password.value,\n        }),\n      })\n    }\n\n    try {\n      const { userid, email, token } = isSignupMode\n        ? await signupHandler()\n        : await loginHandler()\n\n      auth.login(userid, token)\n    } catch (error) {\n      console.error(error.message)\n    }\n  }\n\n  return (\n    <>\n      {error && <ErrorModal error={error} onClear={clearErrorHandler} />}\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>{isSignupMode ? 'Signup Required' : 'Login Required'}</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {isSignupMode && (\n            <>\n              <Input\n                id=\"name\"\n                element=\"input\"\n                type=\"text\"\n                label=\"Name\"\n                validators={[VALIDATOR_REQUIRE()]}\n                errorText=\"Please enter a valid name.\"\n                onInput={inputHandler}\n              />\n              <ImageUpload\n                id=\"image\"\n                onInput={inputHandler}\n                center\n                errorText=\"Please provide an image\"\n              />\n            </>\n          )}\n\n          <Input\n            id=\"email\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Email\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email.\"\n            onInput={inputHandler}\n          />\n          <Input\n            id=\"password\"\n            element=\"input\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password (at least 6 characters).\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isSignupMode ? 'Signup' : 'Login'}\n          </Button>\n          <Button inverse type=\"button\" onClick={toggleSignupLogin}>\n            {isSignupMode ? 'Existing User?' : 'New User?'}\n          </Button>\n        </form>\n      </Card>\n    </>\n  )\n}\n"],"sourceRoot":""}