{"version":3,"sources":["shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Map","props","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","React","createElement","ref","className","concat","style","PlaceItem","auth","useContext","AuthContext","isLoading","error","http","clearErrorHandler","useHttpClient","showMap","setShowMap","useState","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","async","process","id","method","headers","Authorization","token","onDelete","excepshun","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","openMapHandler","userId","creatorId","to","showDeleteHandler","PlaceList","items","length","place","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","places","console","log","fetchUserPlaces","deletedPlaceid","prevPlaces","filter"],"mappings":"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","file":"static/js/6.7bc6077a.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\n\nimport './Map.css'\n\nconst Map = (props) => {\n  const mapRef = useRef()\n\n  const { center, zoom } = props\n\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom,\n    })\n\n    new window.google.maps.Marker({ position: center, map: map })\n  }, [center, zoom])\n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    ></div>\n  )\n}\n\nexport default Map\n","import React, { useState, useContext } from 'react'\nimport { AuthContext } from '../../shared/context/auth-context'\n\nimport { useHttpClient } from '../../shared/hooks/http'\nimport Card from '../../shared/components/UIElements/Card'\nimport Button from '../../shared/components/FormElements/Button'\nimport Modal from '../../shared/components/UIElements/Modal'\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal'\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'\n\nimport Map from '../../shared/components/UIElements/Map'\nimport './PlaceItem.css'\n\nconst PlaceItem = (props) => {\n  const auth = useContext(AuthContext)\n  const { isLoading, error, http, clearErrorHandler } = useHttpClient()\n\n  const [showMap, setShowMap] = useState(false)\n  const [showConfirmModal, setShowConfirmModal] = useState(false)\n\n  const openMapHandler = () => setShowMap(true)\n  const closeMapHandler = () => setShowMap(false)\n\n  const showDeleteHandler = () => setShowConfirmModal(true)\n  const cancelDeleteHandler = () => setShowConfirmModal(false)\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false)\n\n    try {\n      await http(process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: 'Bearer ' + auth.token,\n        },\n      })\n      props.onDelete(props.id)\n    } catch (excepshun) {}\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearErrorHandler} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={16} />\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header=\"Are you sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <>\n            <Button inverse onClick={cancelDeleteHandler}>\n              CANCEL\n            </Button>\n            <Button danger onClick={confirmDeleteHandler}>\n              DELETE\n            </Button>\n          </>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this place? Please note that it\n          cannot be undone thereafter\n        </p>\n      </Modal>\n      <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              alt={props.title}\n            />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p>{props.description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button inverse onClick={openMapHandler}>\n              VIEW ON MAP\n            </Button>\n            {auth.userId === props.creatorId && (\n              <Button to={`/places/${props.id}`}>EDIT</Button>\n            )}\n            {auth.userId === props.creatorId && (\n              <Button danger onClick={showDeleteHandler}>\n                DELETE\n              </Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  )\n}\n\nexport default PlaceItem\n","import React from 'react'\n\nimport Card from '../../shared/components/UIElements/Card'\nimport Button from '../../shared/components/FormElements/Button'\n\nimport PlaceItem from './PlaceItem'\nimport './PlaceList.css'\n\nconst PlaceList = (props) => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"place-list center\">\n        <Card>\n          <h2>No places found. Maybe create one?</h2>\n          <Button to=\"/places/new\">Share Place</Button>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <ul className=\"place-list\">\n      {props.items.map((place) => (\n        <PlaceItem\n          key={place.id}\n          id={place.id}\n          image={place.image}\n          title={place.title}\n          description={place.description}\n          address={place.address}\n          creatorId={place.creator}\n          coordinates={place.location}\n          onDelete={props.onDeletePlace}\n        />\n      ))}\n    </ul>\n  )\n}\n\nexport default PlaceList\n","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useHttpClient } from '../../shared/hooks/http'\n\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal'\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'\n\nimport PlaceList from '../components/PlaceList'\n\nconst UserPlaces = () => {\n  const { http, isLoading, error, clearErrorHandler } = useHttpClient()\n  const [loadedPlaces, setLoadedPlaces] = useState(null)\n  const userId = useParams().userId\n\n  useEffect(() => {\n    const fetchUserPlaces = async () => {\n      try {\n        const { places } = await http(\n          process.env.REACT_APP_BACKEND_URL + `/places/user/${userId}`\n        )\n        setLoadedPlaces(places)\n      } catch (excepshun) {\n        console.log({ excepshun })\n      }\n    }\n    fetchUserPlaces()\n  }, [userId])\n\n  const deletePlaceHandler = (deletedPlaceid) => {\n    setLoadedPlaces((prevPlaces) =>\n      prevPlaces.filter((place) => place.id !== deletedPlaceid)\n    )\n  }\n  return (\n    <>\n      <ErrorModal error={error} onClear={clearErrorHandler} />\n      {isLoading ?? (\n        <div className=\"center\">\n          <LoadingSpinner asOverlay />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && (\n        <PlaceList items={loadedPlaces} onDeletePlace={deletePlaceHandler} />\n      )}\n    </>\n  )\n}\n\nexport default UserPlaces\n"],"sourceRoot":""}