{"version":3,"sources":["shared/util/validators.js","shared/components/FormElements/Input.js","shared/hooks/form.js","places/pages/UpdatePlace.js"],"names":["VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","validator","trim","length","test","inputReducer","state","action","isTouched","Input","props","inputState","dispatch","useReducer","initialValue","initialValid","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","React","createElement","placeholder","onChange","onBlur","rows","className","concat","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","UpdatePlace","auth","useContext","AuthContext","inputHandler","setFormData","title","description","isLoading","error","http","clearErrorHandler","useHttpClient","loadedPlace","setLoadedPlace","useState","placeId","useParams","history","useHistory","async","place","process","excepshun","getPlaceToUpdate","LoadingSpinner","Fragment","ErrorModal","onClear","onSubmit","preventDefault","method","headers","Authorization","token","body","JSON","stringify","push","userId","Button","disabled","Card"],"mappings":"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","file":"static/js/5.09608b5b.chunk.js","sourcesContent":["const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useReducer, useEffect } from 'react'\n\nimport { validate } from '../../util/validators'\nimport './Input.css'\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      }\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false,\n  })\n\n  const { id, onInput } = props\n  const { value, isValid } = inputState\n\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput])\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators,\n    })\n  }\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH',\n    })\n  }\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    )\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && 'form-control--invalid'\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  )\n}\n\nexport default Input\n","import { useCallback, useReducer } from 'react'\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      }\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      }\n    default:\n      return state\n  }\n}\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  })\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    })\n  }, [])\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity,\n    })\n  }, [])\n\n  return [formState, inputHandler, setFormData]\n}\n","import React, { useEffect, useState, useContext } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\n\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from '../../shared/util/validators'\n\nimport Input from '../../shared/components/FormElements/Input'\nimport Button from '../../shared/components/FormElements/Button'\nimport Card from '../../shared/components/UIElements/Card'\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal'\n\nimport { useForm } from '../../shared/hooks/form'\nimport { useHttpClient } from '../../shared/hooks/http'\nimport { AuthContext } from '../../shared/context/auth-context'\nimport './PlaceForm.css'\n\nexport default function UpdatePlace() {\n  const auth = useContext(AuthContext)\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: true,\n      },\n      description: {\n        value: '',\n        isValid: true,\n      },\n    },\n    true\n  )\n\n  const { isLoading, error, http, clearErrorHandler } = useHttpClient()\n  const [loadedPlace, setLoadedPlace] = useState(null)\n\n  const placeId = useParams().placeId\n  const history = useHistory()\n\n  useEffect(() => {\n    const getPlaceToUpdate = async () => {\n      try {\n        const { place } = await http(\n          process.env.REACT_APP_BACKEND_URL + `/places/${placeId}`\n        )\n\n        setLoadedPlace(place)\n        setFormData(\n          {\n            title: {\n              value: place.title,\n              isValid: true,\n            },\n            description: {\n              value: place.description,\n              isValid: true,\n            },\n          },\n          true\n        )\n      } catch (excepshun) {}\n    }\n\n    getPlaceToUpdate()\n  }, [placeId])\n\n  const placeUpdateSubmitHandler = async (event) => {\n    event.preventDefault()\n\n    try {\n      const { place } = await http(\n        process.env.REACT_APP_BACKEND_URL + `/places/${placeId}`,\n        {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + auth.token,\n          },\n          body: JSON.stringify({\n            title: formState.inputs.title.value,\n            description: formState.inputs.description.value,\n          }),\n        }\n      )\n      history.push(`/${auth.userId}/places`)\n    } catch (excepshun) {}\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    )\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <ErrorModal error={error} onClear={clearErrorHandler} />\n      {!isLoading && loadedPlace && (\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"input\"\n            type=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min 5 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.description}\n            initialValid={true}\n          />\n\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            Update Place\n          </Button>\n        </form>\n      )}\n    </>\n  )\n}\n"],"sourceRoot":""}